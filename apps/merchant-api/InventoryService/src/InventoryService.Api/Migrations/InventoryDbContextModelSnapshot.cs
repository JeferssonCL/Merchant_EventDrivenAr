// <auto-generated />
using System;
using InventoryService.Intraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InventoryService.Api.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    partial class InventoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95920a11-05c3-4ab6-987a-3deb415d9519"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3190),
                            IsActive = true,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("19025992-3eff-40b9-a007-faf4178680aa"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3210),
                            IsActive = true,
                            Name = "Clothing & Fashion"
                        },
                        new
                        {
                            Id = new Guid("b309ea3d-09bd-4d34-8413-ee863bbd8bdf"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3225),
                            IsActive = true,
                            Name = "Mobile Phones",
                            ParentCategoryId = new Guid("95920a11-05c3-4ab6-987a-3deb415d9519")
                        },
                        new
                        {
                            Id = new Guid("4fcbef97-7064-4da5-9af5-ffa2320840bb"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3248),
                            IsActive = true,
                            Name = "Laptops & Computers",
                            ParentCategoryId = new Guid("95920a11-05c3-4ab6-987a-3deb415d9519")
                        },
                        new
                        {
                            Id = new Guid("85035dba-16d5-45c4-9909-0fb3d153add8"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3261),
                            IsActive = true,
                            Name = "Cameras & Photography",
                            ParentCategoryId = new Guid("95920a11-05c3-4ab6-987a-3deb415d9519")
                        },
                        new
                        {
                            Id = new Guid("6b229c58-a110-4a4f-8fa0-4c936ae5c373"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3275),
                            IsActive = true,
                            Name = "Audio Equipment",
                            ParentCategoryId = new Guid("95920a11-05c3-4ab6-987a-3deb415d9519")
                        },
                        new
                        {
                            Id = new Guid("c72d66de-9854-4bc1-8b07-be20a1ab826a"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3289),
                            IsActive = true,
                            Name = "Wearable Technology",
                            ParentCategoryId = new Guid("95920a11-05c3-4ab6-987a-3deb415d9519")
                        },
                        new
                        {
                            Id = new Guid("d7985377-1a8a-4aa8-adfb-1c156ea589ab"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3308),
                            IsActive = true,
                            Name = "Smart Home Devices",
                            ParentCategoryId = new Guid("95920a11-05c3-4ab6-987a-3deb415d9519")
                        },
                        new
                        {
                            Id = new Guid("6642fc38-2270-4d51-bb72-a1cc54803c4b"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3322),
                            IsActive = true,
                            Name = "Television & Video",
                            ParentCategoryId = new Guid("95920a11-05c3-4ab6-987a-3deb415d9519")
                        },
                        new
                        {
                            Id = new Guid("c6201759-5c9a-48db-b679-de59670e7d9c"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3335),
                            IsActive = true,
                            Name = "Gaming Consoles",
                            ParentCategoryId = new Guid("95920a11-05c3-4ab6-987a-3deb415d9519")
                        },
                        new
                        {
                            Id = new Guid("91fa97cb-6d0c-405b-828f-73aa42f05ef3"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3350),
                            IsActive = true,
                            Name = "Men's Clothing",
                            ParentCategoryId = new Guid("19025992-3eff-40b9-a007-faf4178680aa")
                        },
                        new
                        {
                            Id = new Guid("809879f1-f990-4746-a7f4-6c2a556a8c8d"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3365),
                            IsActive = true,
                            Name = "Women's Clothing",
                            ParentCategoryId = new Guid("19025992-3eff-40b9-a007-faf4178680aa")
                        },
                        new
                        {
                            Id = new Guid("eb66eec7-2746-4bdc-8af5-57598c7b2a6c"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3379),
                            IsActive = true,
                            Name = "Kids' Clothing",
                            ParentCategoryId = new Guid("19025992-3eff-40b9-a007-faf4178680aa")
                        },
                        new
                        {
                            Id = new Guid("2bc73de4-162d-44e7-8cf9-c8fb1344ed99"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3392),
                            IsActive = true,
                            Name = "Footwear",
                            ParentCategoryId = new Guid("19025992-3eff-40b9-a007-faf4178680aa")
                        },
                        new
                        {
                            Id = new Guid("3bcb7300-2337-40fe-b336-dd995865bef0"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3406),
                            IsActive = true,
                            Name = "Accessories",
                            ParentCategoryId = new Guid("19025992-3eff-40b9-a007-faf4178680aa")
                        },
                        new
                        {
                            Id = new Guid("b8690753-374d-40e0-86a1-2082b1cfb5d0"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3428),
                            IsActive = true,
                            Name = "Jewelry",
                            ParentCategoryId = new Guid("19025992-3eff-40b9-a007-faf4178680aa")
                        },
                        new
                        {
                            Id = new Guid("61a149f3-36a3-42b6-9cf7-e224cee739f1"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3446),
                            IsActive = true,
                            Name = "Watches",
                            ParentCategoryId = new Guid("19025992-3eff-40b9-a007-faf4178680aa")
                        },
                        new
                        {
                            Id = new Guid("a2865462-0af4-490a-97ef-e613050d9439"),
                            CreatedAt = new DateTime(2024, 11, 12, 13, 56, 6, 354, DateTimeKind.Utc).AddTicks(3465),
                            IsActive = true,
                            Name = "Handbags & Wallets",
                            ParentCategoryId = new Guid("19025992-3eff-40b9-a007-faf4178680aa")
                        });
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("BasePrice")
                        .HasColumnType("double precision");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("VariantId");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReview");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double>("PriceAdjustment")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.Variant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Variant");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("InventoryService.Domain.Concretes.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryService.Domain.Concretes.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.Category", b =>
                {
                    b.HasOne("InventoryService.Domain.Concretes.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.Image", b =>
                {
                    b.HasOne("InventoryService.Domain.Concretes.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.ProductAttribute", b =>
                {
                    b.HasOne("InventoryService.Domain.Concretes.ProductVariant", "ProductVariant")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryService.Domain.Concretes.Variant", "Variant")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.ProductReview", b =>
                {
                    b.HasOne("InventoryService.Domain.Concretes.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.ProductVariant", b =>
                {
                    b.HasOne("InventoryService.Domain.Concretes.Image", "Image")
                        .WithOne("ProductVariant")
                        .HasForeignKey("InventoryService.Domain.Concretes.ProductVariant", "ImageId");

                    b.HasOne("InventoryService.Domain.Concretes.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.Image", b =>
                {
                    b.Navigation("ProductVariant")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.ProductVariant", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("InventoryService.Domain.Concretes.Variant", b =>
                {
                    b.Navigation("ProductAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
